"use strict";(self.webpackChunklyra=self.webpackChunklyra||[]).push([[72],{7522:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(9901);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(g,s(s({ref:t},c),{},{components:n})):r.createElement(g,s({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4642:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(2875),a=(n(9901),n(7522));const i={sidebar_position:1},s="Create a new Lyra instance",o={unversionedId:"usage/creating-a-new-lyra-instance",id:"usage/creating-a-new-lyra-instance",title:"Create a new Lyra instance",description:"Creating a new instance is very simple.",source:"@site/docs/usage/creating-a-new-lyra-instance.md",sourceDirName:"usage",slug:"/usage/creating-a-new-lyra-instance",permalink:"/lyra/docs/usage/creating-a-new-lyra-instance",draft:!1,editUrl:"https://github.com/nearform/lyra/edit/main/packages/docs/docs/usage/creating-a-new-lyra-instance.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Usage",permalink:"/lyra/docs/category/usage"},next:{title:"Insert Data",permalink:"/lyra/docs/usage/insert-data"}},l={},p=[{value:"Create",id:"create",level:2},{value:"Nested Properties",id:"nested-properties",level:3},{value:"Input Analyzer",id:"input-analyzer",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"create-a-new-lyra-instance"},"Create a new Lyra instance"),(0,a.kt)("p",null,"Creating a new instance is very simple."),(0,a.kt)("h2",{id:"create"},"Create"),(0,a.kt)("p",null,"We ",(0,a.kt)("inlineCode",{parentName:"p"},"create")," a new instance (from now on database) with an ",(0,a.kt)("strong",{parentName:"p"},"indexing ",(0,a.kt)("inlineCode",{parentName:"strong"},"schema")),".",(0,a.kt)("br",null),"\nThe schema represents ",(0,a.kt)("strong",{parentName:"p"},"the structure")," of the document to be inserted."),(0,a.kt)("p",null,"A database can be as simple as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="lyra.js"',title:'"lyra.js"'},"import { create } from '@nearform/lyra';\n\nconst db = create({\n  schema: {\n    word: 'string',\n  }\n});\n")),(0,a.kt)("p",null,"or more variegated"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="lyra.js"',title:'"lyra.js"'},"import { create } from '@nearform/lyra';\n\nconst movieDB = create({\n  schema: {\n    title: 'string',\n    director: 'string',\n    plot: 'string',\n    year: 'number',\n    isFavorite: 'boolean',\n  }\n});\n")),(0,a.kt)("h3",{id:"nested-properties"},"Nested Properties"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Lyra now supports nested properties! Try them out.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="nested-properties.js"',title:'"nested-properties.js"'},"const movieDB = create({\n  schema: {\n    title: 'string',\n    plot: 'string',\n    cast: { \n      director: 'string',\n      leading: 'string'\n    },\n    year: 'number',\n    isFavorite: 'boolean',\n  }\n});\n")),(0,a.kt)("h2",{id:"input-analyzer"},"Input Analyzer"),(0,a.kt)("p",null,"By default, Lyra analyzes the input and performs a ",(0,a.kt)("inlineCode",{parentName:"p"},"stemming")," operation, which allows the engine to perform more optimized queries, as well as saving indexing space."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"What is stemming?"),"In linguistic morphology and information retrieval, stemming is the process of reducing inflected (or sometimes derived) words to their word stem, base or root form\u2014generally a written word form. The stem need not be identical to the morphological root of the word; it is usually sufficient that related words map to the same stem, even if this stem is not in itself a valid root. Algorithms for stemming have been studied in computer science since the 1960s. Many search engines treat words with the same stem as synonyms as a kind of query expansion, a process called conflation. ",(0,a.kt)("a",{href:"https://en.wikipedia.org/wiki/Stemming"},"Wikipedia")),(0,a.kt)("p",null,"By default, Lyra uses ",(0,a.kt)("strong",{parentName:"p"},"the English language analyzer"),", but we can override this behaviour by setting the property ",(0,a.kt)("inlineCode",{parentName:"p"},"defaultLanguage")," at database initialization."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="lyra.js"',title:'"lyra.js"'},"const db = new Lyra({\n  schema: {\n    word: 'string'\n  },\n  defaultLanguage: 'italian',\n});\n")),(0,a.kt)("p",null,"Currently the available languages are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"dutch"),(0,a.kt)("li",{parentName:"ul"},"english (default)"),(0,a.kt)("li",{parentName:"ul"},"french"),(0,a.kt)("li",{parentName:"ul"},"italian"),(0,a.kt)("li",{parentName:"ul"},"norwegian"),(0,a.kt)("li",{parentName:"ul"},"portugese"),(0,a.kt)("li",{parentName:"ul"},"russian"),(0,a.kt)("li",{parentName:"ul"},"spanish"),(0,a.kt)("li",{parentName:"ul"},"swedish")))}u.isMDXComponent=!0}}]);